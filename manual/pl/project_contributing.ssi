:B~ Wnoszenie wkładu do tego projektu

1~contributing-to-project Wnoszenie wkładu do tego projektu

Wnosząc swój wkład należy jasno określić posiadacza jego praw autorskich i
zawrzeć wszelkie stosowane oświadczenie licencjonowania. Należy pamiętać, że
aby zmiany były zaakceptowane, wkład musi być licencjonowany na tej samej
licencji co reszta dokumentów, a mianowicie, GPL w wersji 3 lub nowszej.

Wkład do projektu, taki jak tłumaczenia i poprawki, są bardzo mile
widziane. Każdy może bezpośrednio zaangażować się w repozytoriach, jednak
prosimy wysłać większe zmiany do listy mailingowej, aby omówić je w
pierwszej kolejności. Patrz rozdział {kontakt}#contact aby uzyskać więcej
informacji.

${projekt} używa Git jako systemu kontroli wersji i zarządzania kodem
źródłowym. Jak wyjaśniono w {repozytorium Git}#git-repositories są dwie
główne gałęzie rozwoju: *{debian}* i *{debian-next}*. Każdy może wprowadzić
zmiany do gałęzi *{debian-next}* w repozytoriach ive-boot, live-build,
live-config, live-images, live-manual i live-tools.

Jednakże istnieją pewne restrykcje. Serwer odrzuci:

_* Non fast-forward pushes.

_* Zmiany wymagające scalenia.

_* Dodawanie lub usuwanie tagów lub gałęzi rozwojowych.

Nawet jeżeli wszystkie zmiany mogą być później zweryfikowane, prosimy abyś
używał zdrowego rozsądku i tworzył dobre zmiany opisane dobrym komentarzem.

_* Pisz komentarze do zmian, które składają się z pełnych, sensownych zdań w
języku angielskim, począwszy od dużej litery, a kończących się
kropką. Zwykle te komentarze zaczynają się od
"Fixing/Adding/Removing/Correcting/Translating/...".
("Naprawianie/Dodawanie/Usuwanie/Korygowanie/Tłumaczenie/ itd. ... ".)

_* Pisz dobre komenarze do zmian. Pierwsza linia musi być dokładne
podsumowanie treści popełnić, która zostanie uwzględniona w liście zmian
(ang. changelog). Jeśli musisz zrobić kilka wyjaśnień, napisz je niżej
pozostawiając pusty wiersz po pierwszej lini, a następnie kolejny pusty
wiersz po każdym akapicie. Linie każdego akapitu nie powinny przekraczać 80
znaków.

_ * Wysyłaj zmiany osobno. To znaczy; nie mieszaj niepowiązanych ze sobą
rzeczy w tej samej zmianie. Dodać osobną zmianę dla każdej rzeczy, którą
zmieniasz.

2~ Wprowadzanie zmian

W celu wysłania zmian do repozytoriów, należy wykonać następującą
procedurę. Tutaj używamy live-manual jako przykładu, więc zastąp go nazwą
repozytorium, z którym chcesz pracować. Aby uzyskać szczegółowe informacje
na temat edycji podręcznika live-manual zobacz: {Współtworzenie tego
dokumentu}#how-to-contribute.

_* Pobierz publiczny klucz do wprowadzania zmian:

code{

 $ mkdir -p ~/.ssh/keys
 $ wget http://debian-live.alioth.debian.org/other/keys/git@debian-live.alioth.debian.org -O ~/.ssh/keys/git@debian-live.alioth.debian.org
 $ wget http://debian-live.alioth.debian.org/other/keys/git@debian-live.alioth.debian.org.pub -O ~/.ssh/keys/git@debian-live.alioth.debian.org.pub
 $ chmod 0600 ~/.ssh/keys/git@debian-live.alioth.debian.org*

}code

_* Dodaj następującą sekcję do twojej konfiguracji klienta openssh:

code{

$ cat >> ~/.ssh/config << EOF
 Host debian-live.alioth.debian.org
     Hostname debian-live.alioth.debian.org
     User git
     IdentitiesOnly yes
     IdentityFile ~/.ssh/keys/git@debian-live.alioth.debian.org
 EOF

}code

_* Sprawdź i sklonuj kopię live-manual przez through ssh:

code{

 $ git clone ssh://git.debian.org/git/debian-live/live-manual.git
 $ cd live-manual && git checkout debian-next

}code

_* Upewnij się, że masz ustawionego autora i adres email w konfiguracji Git:

code{

  $ git config user.name "John Doe"
  $ git config user.email john@example.org

}code

*{Ważne:}* Pamiętaj, że powinno się wprowadzać wszelkie zmiany wyłącznie w gałęzi *{debian-next}*.

_* Wprowadź zmiany. W tym przykładzie będzie najpierw napisać nowy dział
dotyczący stosowania plastrów, a następnie przygotować się do popełnienia
dodawanie plików i pisanie popełnienia wiadomość tak:

code{

 $ git commit -a -m "Adding a section on applying patches."

}code

_* Wyślij poprawki na serwer:

code{

 $ git push

}code

2~translation-of-manpages Translation of man pages

You can also contribute to the project working on the translation of the man
pages for the different live-* packages that the project maintains. The
procedure is different depending on whether you are starting a translation
from scratch or continue working on an already existing one:

_* Working on an already existing translation

If you want to maintain the translation of an already existing language you
have to make your changes to your #{manpages/po/${LANGUAGE}/*.po}# file or
files and then run #{make rebuild}# from inside the #{manpages/}#
directory. This will update the actual man pages in
#{manpages/${LANGUAGE}/*}#

_* Starting a new translation from scratch

In order to add a new translation of any of the project's man pages you have
to follow a similar procedure. It could be summarized as follows:

_2* Open the #{manpages/pot/}# file or files in your favourite editor, such
as /{poedit}/, and save it as a .po file in
#{manpages/po/${LANGUAGE}/}#. (You will have to create your #{${LANGUAGE}/}#
directory).

_2* Run #{make rebuild}# from inside the #{manpages/}# directory to create
the #{manpages/${LANGUAGE}/}# files which will contain the actual man pages.

Remember that you will have to add all the directories and files, then make
the commit and finally push to the git server.

